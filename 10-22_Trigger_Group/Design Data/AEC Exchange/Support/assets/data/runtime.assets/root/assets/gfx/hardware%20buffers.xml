<Definition id="gfx hardware buffers">

  <!--
        
   AIRViz vertex format & indices, describing a hardware rendering vertex buffer payload
   
   Vertex buffers are made of one vertex payload <Data> element, one optional vertex
   format <Data> element and zero or more index buffer <Data> elements
   
   Vertex buffers can also nest additional payload <Data> elements, for instance textures
   or normal maps.
  
   gfx.attr.vtx.osu : offset, stream, usage 16 bit integers packed as a 3-array
   gfx.attr.vtx.type : raw data layout packed as an enumeration
   gfx.attr.vtx.role : field semantic packed as an enumeration
   gfx.attr.vtx.semantic : buffer interpretation semantic
    
   gfx.trait.vtx.field : full vertex format entry description
   gfx.trait.vtx.custom : byte stream
   gfx.trait.vtx.P : position
   gfx.trait.vtx.PN : position + normal
   gfx.trait.vtx.PC : position + color
   gfx.trait.vtx.PNC : position + normal + color
   gfx.trait.vtx.PNCT : position + normal + color + texspace
   
   TODO : this is where all the potential 2D formats will be defined as well. Obviously we
   need 2D equivalent for P and PC.
   
   The index buffers are using explicit types showing their semantic. The basic point, line
   and triangle semantics are using attributes with 1,2 and 3 32bit indices, automatically
   ensuring a proper index count.
   The extended strip and fan semantics are using individual indices and it's up to the
   producer to ensure proper encoding.
   
   gfx.trait.idx.point : 32bit indices with point semantic
   gfx.trait.idx.line : 32bit index pairs with line semantic
   gfx.trait.idx.line.strip : 32bit indices with line strip semantic
   gfx.trait.idx.triangle : 32bit index triplets with triangle semantic
   gfx.trait.idx.triangle.strip : 32bit indices with triangle strip semantic
   gfx.trait.idx.triangle.fan : 32bit indices with triangle fan semantic
      
   -->
  <Attribute id="gfx.attr.vtx.osu" type="INT16" dim="3"/>
  <Attribute id="gfx.attr.vtx.type" type="ENUM">
    <Enum key="float1" val="0"/>
    <Enum key="float2" val="1"/>
    <Enum key="float3" val="2"/>
    <Enum key="float4" val="3"/>
    <Enum key="short float 2" val="15"/>
    <Enum key="short float 4" val="16"/>
    <Enum key="color 4" val="4"/>
    <Enum key="short 2" val="6"/>
    <Enum key="short 4" val="7"/>
    <Enum key="byte 4" val="5"/>
  </Attribute>
  <Attribute id="gfx.attr.vtx.role" type="ENUM">
    <Enum key="position" val="0"/>
    <Enum key="normal" val="1"/>
    <Enum key="texture" val=""/>
    <Enum key="color" val=""/>
    <Enum key="tangent" val=""/>
    <Enum key="bitangent" val=""/>
    <Enum key="texture" val=""/>
    <Enum key="texture 0" val=""/>
    <Enum key="texture 1" val=""/>
    <Enum key="texture 2" val=""/>
    <Enum key="texture 3" val=""/>
  </Attribute>
  <Trait id="gfx.trait.idx.point">
    <Link to="gfx.attr.i"/>
  </Trait>
  <Trait id="gfx.trait.idx.line">
    <Link to="gfx.attr.ij"/>
  </Trait>
  <Trait id="gfx.trait.idx.line.strip">
    <Link to="gfx.attr.i"/>
  </Trait>
  <Trait id="gfx.trait.idx.triangle">
    <Link to="gfx.attr.ijk"/>
  </Trait>
  <Trait id="gfx.trait.format.field">
    <Link to="gfx.attr.vtx.type"/>
    <Link to="gfx.attr.vtx.role"/>
    <Link to="gfx.attr.vtx.osu"/>
  </Trait>
  <Trait id="gfx.trait.vtx.custom">
    <Link to="gfx.attr.byte"/>
  </Trait>
  <Trait id="gfx.trait.vtx.P">
    <Link to="gfx.attr.xyz"/>
  </Trait>
  <Trait id="gfx.trait.vtx.PN">
    <Link to="gfx.attr.xyz"/>
    <Link to="gfx.attr.normal"/>
  </Trait>
  <Trait id="gfx.trait.vtx.PC">
    <Link to="gfx.attr.xyz"/>
    <Link to="gfx.attr.rgb"/>
  </Trait>
  <Trait id="gfx.trait.vtx.PNC">
    <Link to="gfx.trait.vtx.PN"/>
    <Link to="gfx.attr.rgb"/>
  </Trait>
  <Trait id="gfx.trait.vtx.PNCT">
    <Link to="gfx.trait.vtx.PNC"/>
    <Link to="gfx.attr.uv"/>
  </Trait>

  <!--
    
    vertex buffer construct
    
    Construct, binding data describing a vertex format to bytes forming the actual vertex
    buffer and index buffer.
    Compliant <Node> elements may contain :
      - one "VTX" <Data> element whose type is in gfx.type.vtx.*
      - zero or one "FORMAT" <Data> of type gfx.type.format.field
      - zero or more buffer "IDX" <Data> elements whose type is in gfx.type.idx.*

  -->
  <Construct id="gfx.cstr.vtx.buffer">
    <VertexBuffer format="FORMAT" buffer="VTX" index="IDX"/>
  </Construct>
  
  <!--
    
    render node construct
    
    Construct, binding a node representing a renderable item to nodes representing
    its vertex buffers. Each vertex buffer is fully described and maybe
    visible or not.
    
  -->
  <Construct id="gfx.cstr.render.node">
    <Renderable buffer="BUFFER" indexable="true"/>
  </Construct>

  <!-- 
  
    renderable entities
    
    Basic descrition of a renderable entity, defining its bounding box,
    and indexing semantic.
    
    gfx.trait.render.base : common concepts : obj->world transform, visibility, ect..
    gfx.trait.render.node : basic rendering node (base + bbox)
    gfx.trait.render.buffer : base + vertex buffer specific data
    
  -->
  <Trait id="gfx.trait.render.base" role="RENDERBASE">
    <Link to="gfx.attr.visible"/>
    <Link to="gfx.attr.xfo"/>
  </Trait>
  <Trait id="gfx.trait.render.node">
    <Link to="gfx.trait.render.base"/>
    <Link to="gfx.attr.bbox"/>
  </Trait>
  <Trait id="gfx.trait.render.buffer">
    <Link to="gfx.attr.bbox"/>
  </Trait>

  <!--
    
    hardware buffer <Node> and <Data> types
    
    gfx.type.render.node : must be used by <Node> elements interpreted as renderable entities
    gfx.type.render.buffer : must be used by <Node> elements interpreted as vertex buffers
    
    gfx.type.vtx.field : must be used by <Data> elements interpreted as vertex format
    
    gfx.type.vtx.buffer : must be used by <Data> elements interpreted as custom vertex buffer payload
    gfx.type.vtx.P : must be used by <Data> elements interpreted as P vertex buffer payload
    gfx.type.vtx.PN : must be used by <Data> elements interpreted as PN vertex buffer payload
    gfx.type.vtx.PC : must be used by <Data> elements interpreted as PC vertex buffer payload
    gfx.type.vtx.PNC : must be used by <Data> elements interpreted as PNC vertex buffer payload
    gfx.type.vtx.PNCT : must be used by <Data> elements interpreted as PNCT vertex buffer payload
    
    gfx.type.idx.point : must be used by <Data> elements interpreted as point index buffers
    gfx.type.idx.line : must be used by <Data> elements interpreted as line index buffers
    gfx.type.idx.line.strip : must be used by <Data> elements interpreted as line strip index buffers
    gfx.type.idx.triangle : must be used by <Data> elements interpreted as triangle index buffers
    gfx.type.idx.triangle.strip : must be used by <Data> elements interpreted as triangle strip index buffers
    gfx.type.idx.triangle.fan : must be used by <Data> elements interpreted as triangle fan index buffers
            
   -->
  <Type id="gfx.type.format.field" trait="gfx.trait.format.field"/>

  <Type id="gfx.type.vtx.custom" trait="gfx.trait.vtx.custom"/>
  <Type id="gfx.type.vtx.P" trait="gfx.trait.vtx.P" blksize="4096"/>
  <Type id="gfx.type.vtx.PN" trait="gfx.trait.vtx.PN" blksize="4096"/>
  <Type id="gfx.type.vtx.PC" trait="gfx.trait.vtx.PC" blksize="4096"/>
  <Type id="gfx.type.vtx.PNC" trait="gfx.trait.vtx.PNC" blksize="4096"/>
  <Type id="gfx.type.vtx.PNCT" trait="gfx.trait.vtx.PNCT" blksize="4096"/>

  <Type id="gfx.type.idx.point" trait="gfx.trait.idx.point" blksize="1024"/>
  <Type id="gfx.type.idx.line" trait="gfx.trait.idx.line" blksize="1024"/>
  <Type id="gfx.type.idx.line.strip" trait="gfx.trait.idx.line.strip" blksize="1024"/>
  <Type id="gfx.type.idx.triangle" trait="gfx.trait.idx.triangle" blksize="1024"/>
  <Type id="gfx.type.idx.triangle.strip" trait="gfx.trait.idx.point" blksize="1024"/>
  <Type id="gfx.type.idx.triangle.fan" trait="gfx.trait.idx.point" blksize="1024"/>

  <Type id="gfx.type.render.node" trait="gfx.trait.render.node" construct="gfx.cstr.render.node"/>
  <Type id="gfx.type.render.buffer" trait="gfx.trait.render.buffer" construct="gfx.cstr.vtx.buffer"/>

</Definition>